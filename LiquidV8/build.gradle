apply plugin: 'com.android.library'

import groovy.json.JsonSlurper

def getVersionFromNpm() {
    def inputFile = file("../package.json")
    def packageJson = new JsonSlurper().parseText(inputFile.text)

    return packageJson["version"]
}

static def getVersionCode(vn) {
    def spl = vn.split("\\.")
    def vc = 0.0
    spl.eachWithIndex { code, index ->
        vc += code.toInteger() * Math.pow(100,spl.size() - index)
    }
    vc *= Math.pow(100, 4-spl.size())
    Math.round(vc)
}

android {
    compileSdkVersion 28


    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 28
        versionName getVersionFromNpm()
        versionCode = getVersionCode(versionName)

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        externalNativeBuild {
            cmake {
                cppFlags "-std=c++11 -fexceptions"
                arguments "-DANDROID_STL=c++_static"
            }
        }

    }

    buildTypes {
        debug {
            testCoverageEnabled = false
            minifyEnabled false
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.annotation:annotation:1.1.0'
    debugImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.annotation:annotation:1.1.0'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    androidTestImplementation 'org.hamcrest:hamcrest-library:1.3'
}

task copyHeadersToAARRelease(type: Zip) {
    baseName = 'liquidcore-V8-release'
    extension = 'aar.in'
    destinationDir = file('build/outputs/aar')
    def aarNameO = "build/outputs/aar/liquidcore-V8-release.aar"

    from zipTree(aarNameO)
    from("../deps/node-10.15.3/deps/v8/include") {
        into('include/v8')
        include ('**/*.h')
    }
    from("../deps/node-10.15.3/deps/uv/include") {
        into('include/uv')
        include ('**/*.h')
    }
    from("../deps/JavaScriptCore/include/JavaScriptCore") {
        into('include/JavaScriptCore')
        include('*.h')
    }
}
task removeOldAARRelease(type: Delete) {
    delete file('build/outputs/aar/liquidcore-V8-release.aar.in')
}
task renameAARRelease (type: Copy) {
    from ('build/outputs/aar/')
    include 'liquidcore-V8-release.aar.in'
    destinationDir file('build/outputs/aar/')
    rename "liquidcore-V8-release.aar.in", "liquidcore-V8-release.aar"
}

afterEvaluate {
    if (project.hasProperty("bundleReleaseAar")) {
        bundleReleaseAar.finalizedBy copyHeadersToAARRelease
        copyHeadersToAARRelease.finalizedBy renameAARRelease
        renameAARRelease.finalizedBy removeOldAARRelease
    }
}
